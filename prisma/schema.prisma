// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String          @id @default(cuid())
  name            String?
  username        String?         @unique
  email           String?         @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  isAdmin         Boolean         @default(false)
  accounts        Account[]
  sessions        Session[]
  quizzes         Quiz[]
  quizAttempts    QuizAttempt[]
  publishedTests  PublishedTest[]
  testAttempts    TestAttempt[]
  folders         Folder[]        // Added folders relationship
  createdAt       DateTime        @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  isDefault Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizzes   Quiz[]   // Relationship to quizzes in this folder
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  questions    String        // JSON string of QuizQuestion[]
  totalQuestions Int
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId     String?       // Added folder relationship
  folder       Folder?       @relation(fields: [folderId], references: [id], onDelete: SetNull)
  attempts     QuizAttempt[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
  @@index([folderId])       // Added index for folder queries
}

model QuizAttempt {
  id           String   @id @default(cuid())
  score        Int
  totalQuestions Int
  answers      String   // JSON string of user answers
  completedAt  DateTime @default(now())
  userId       String
  quizId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
}

model PublishedTest {
  id              String        @id @default(cuid())
  title           String
  description     String?
  questions       String        // JSON string of QuizQuestion[]
  totalQuestions  Int
  timeLimit       Int?          // Time limit in minutes (optional)
  passingPercentage Int         @default(60) // Required percentage to pass (0-100)
  isPublished     Boolean       @default(false)
  publishedAt     DateTime?
  createdByUserId String
  createdBy       User          @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  testAttempts    TestAttempt[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([createdByUserId])
  @@index([isPublished])
}

model TestAttempt {
  id              String        @id @default(cuid())
  score           Int
  totalQuestions  Int
  answers         String        // JSON string of user answers
  startedAt       DateTime      @default(now())
  completedAt     DateTime?
  isCompleted     Boolean       @default(false)
  userId          String
  publishedTestId String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  publishedTest   PublishedTest @relation(fields: [publishedTestId], references: [id], onDelete: Cascade)

  // Ensure one attempt per user per published test
  @@unique([userId, publishedTestId])
  @@index([userId])
  @@index([publishedTestId])
}

model SamplePrompt {
  id          String   @id @default(cuid())
  title       String
  description String?
  prompt      String   // The full prompt text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([title])
}